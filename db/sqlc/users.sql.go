// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users (
  user_name, 
  hassed_password,
  full_name,
  email
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_name, hassed_password, full_name, email, password_changed_at, created_at
`

type CreateUsersParams struct {
	UserName       string
	HassedPassword string
	FullName       string
	Email          string
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRow(ctx, createUsers,
		arg.UserName,
		arg.HassedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.HassedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT id, user_name, hassed_password, full_name, email, password_changed_at, created_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRow(ctx, getUsers, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.HassedPassword,
		&i.FullName,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
